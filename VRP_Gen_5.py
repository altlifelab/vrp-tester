from __future__ import print_function
import json
from datetime import datetime
import urllib.request as urllib
import datetime as dt

import boto3
from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp
from datetime import timedelta
import build_matrix_2 as fetch_matrix

def to_time(time_str):
    date_time = datetime.strptime(time_str, '%d/%m/%Y %H:%M:%S')
    return date_time

def create_data(info, keys_info):

    names = []
    # demand = []
    latitude = []
    longitude = []
    cust_id = []
    wait_times = []
    # time_windows = []
    addresses = []
    vehicle_id = []
    data = {}

    data['API_key'] = keys_info

    cap = []
    try:
        trip_start = to_time(info['trip_info']['trip_time'])
        for item in info['location_info']:
            cust_id.append(item['customer_id'])
            # demand.append(item['demand'])
            latitude.append(item['latitude'])
            longitude.append(item['longitude'])
            names.append(item['customer_name*'])
            # wt_time = item['wait_time']
            wt_time = datetime.strptime(item['wait_time'], "%H:%M:%S")

            wt_time = (wt_time.minute * 60) + wt_time.second

            wait_times.append(wt_time)
            location = "{},{}".format(item['latitude'], item['longitude'])
            addresses.append(location)

        print("address in the get model data: ", addresses)
        data['names'] = names
        data['cust_id'] = cust_id
        data['latitude'] = latitude
        data['longitude'] = longitude
        data['wait_time'] = wait_times
        data['num_vehicles'] = info['trip_info']['num_vehicles']
        data['depot'] = 0
        data['max_dist'] = info['trip_info']['max_dist']
        data['addresses'] = addresses
        for item in info['vehicle_info']:
            cap.append(item['capacity'])
            vehicle_id.append(item['vehicle_id'])
        data['cap'] = cap
        data['vehicle_id'] = vehicle_id
        data["trip_time"] = info['trip_info']['trip_time']
        data["measure_type"] = info['trip_info']['measure_type']

    except Exception as e:
        print("Exception", e)

    return data

def create_data_model(distance_matrix, time_matrix, dict_clean):
    """Stores the data for the problem."""

    data = dict_clean
    if dict_clean["measure_type"] == 'distance':
        data['distance_matrix'] = distance_matrix
    else:
        data['time_matrix'] = time_matrix

    data['depot'] = 0

    return data

def send_request(origin_addresses, dest_addresses, API_key, trip_start):
    """ Build and send request for the given origin and destination addresses."""

    def build_address_str(addresses):
        # Build a pipe-separated string of addresses

        address_str = ''
        for i in range(len(addresses) - 1):
            address_str += addresses[i] + '|'
        address_str += addresses[len(addresses) - 1]
        return address_str

    """ this part needs some change """
    tp_time = datetime.strptime(trip_start, "%d/%m/%Y %H:%M:%S")
    if tp_time > dt.datetime.now():
        trip_start_time = tp_time

    else:
        trip_start_time = dt.datetime.now()

    trip_start = str(int((trip_start_time - dt.datetime(1970, 1, 1)).total_seconds()))

    request = 'https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial' + '&departure_time=' + \
              trip_start
    origin_address_str = build_address_str(origin_addresses)
    dest_address_str = build_address_str(dest_addresses)

    request = request + '&origins=' + origin_address_str + '&destinations=' + \
              dest_address_str + '&key=' + API_key

    jsonResult = urllib.urlopen(request).read()
    response = json.loads(jsonResult)
    return response

def build_distance_matrix(response, measure_type):
    distance_matrix = []
    for row in response['rows']:
        row_list = [row['elements'][j][measure_type]['value'] for j in range(len(row['elements']))]
        # print(row_list)
        distance_matrix.append(row_list)
    return distance_matrix

def build_distance_matrix_trail(response, measure_type):
    distance_matrix = []
    for row in response['rows']:
        row_list = [row['elements'][j][measure_type]['value'] for j in range(len(row['elements']))]
        # print(row_list)
        distance_matrix.append(row_list)
    return distance_matrix

def addTheMatrix(matrix1, matrix2):
    matrix1Rows = len(matrix1)
    matrix2Rows = len(matrix2)

    if (matrix1Rows != matrix2Rows):
        return "Error: rows of the two matrices must be same"

    matrix = []

    for i in range(0, matrix1Rows):
        row = matrix1[i] + matrix2[i]
        matrix.append(row)

    return matrix

def create_distance_matrix(data):
    # addresses = data["addresses"]

    distance_matrix = []
    time_matrix = []
    API_key = data["API_key"]
    trip_start = data['trip_time']
    addresses = [ add.replace(",","|") for add in data['addresses'] ]
    print("address input to create_dist_matrix function ", addresses)
    try:
       # distance_matrix,time_matrix = fetch_matrix.main(addresses,trip_start,API_key)
        pass
    except BaseException as e:
        print("==> problem fetching the matrices",str(e))
        raise Exception(" problem fetching the matrices")
    distance_matrix = [[0.0, 2166.0, 9319.0, 4400.0, 13902.0, 15627.0, 11187.0, 20973.0, 3731.0, 11551.0, 10033.0, 7732.0, 11605.0, 16682.0, 14993.0, 24950.0, 4604.0, 1883.0, 16489.0, 18350.0, 15902.0, 10711.0, 8889.0, 9341.0, 10535.0, 19643.0, 7131.0, 6653.0, 1883.0, 17510.0, 10745.0, 17388.0, 4696.0, 11348.0, 20381.0, 7732.0, 3731.0, 8246.0, 5692.0], [1866.0, 0.0, 7711.0, 4410.0, 16362.0, 14019.0, 9579.0, 22171.0, 5118.0, 9943.0, 8425.0, 7895.0, 9997.0, 15074.0, 13385.0, 26148.0, 5990.0, 2042.0, 14880.0, 16742.0, 17100.0, 10003.0, 10581.0, 10787.0, 8927.0, 18034.0, 8518.0, 5045.0, 2042.0, 15902.0, 12162.0, 15780.0, 6143.0, 10640.0, 18773.0, 7895.0, 5118.0, 9632.0, 7139.0], [6983.0, 5978.0, 0.0, 4562.0, 30965.0, 8539.0, 5853.0, 29508.0, 9252.0, 3388.0, 2953.0, 6175.0, 4517.0, 9594.0, 7906.0, 33429.0, 10178.0, 6191.0, 9401.0, 13016.0, 24692.0, 10488.0, 14767.0, 16571.0, 3423.0, 14308.0, 12705.0, 2221.0, 6191.0, 10423.0, 18253.0, 10300.0, 10594.0, 14818.0, 15047.0, 6175.0, 9252.0, 13820.0, 11589.0], [5073.0, 4404.0, 6290.0, 0.0, 18493.0, 12598.0, 8158.0, 33567.0, 5215.0, 8522.0, 7004.0, 3733.0, 8576.0, 13653.0, 11964.0, 37487.0, 7261.0, 2960.0, 13460.0, 15321.0, 28750.0, 14546.0, 11852.0, 12321.0, 7506.0, 16613.0, 9789.0, 3624.0, 2960.0, 14481.0, 15336.0, 14359.0, 7677.0, 14569.0, 17352.0, 3733.0, 5215.0, 10903.0, 8673.0], [14024.0, 16430.0, 31184.0, 18017.0, 0.0, 28049.0, 23850.0, 4716.0, 17348.0, 30471.0, 31720.0, 21349.0, 30269.0, 27923.0, 24158.0, 17327.0, 15538.0, 15499.0, 23039.0, 31013.0, 8279.0, 18935.0, 22006.0, 18495.0, 31507.0, 32306.0, 18065.0, 19272.0, 15499.0, 31024.0, 11373.0, 30902.0, 14378.0, 16767.0, 33044.0, 21349.0, 17348.0, 25744.0, 13511.0], [14164.0, 13159.0, 7361.0, 11743.0, 27269.0, 0.0, 10090.0, 25812.0, 16433.0, 6649.0, 7898.0, 14154.0, 6446.0, 1308.0, 4421.0, 29732.0, 17359.0, 13372.0, 5917.0, 15673.0, 20995.0, 8351.0, 21949.0, 23752.0, 7684.0, 16966.0, 19886.0, 9402.0, 13372.0, 4219.0, 23625.0, 4097.0, 17774.0, 12681.0, 19863.0, 14154.0, 16433.0, 21001.0, 18770.0], [10592.0, 9587.0, 5462.0, 8171.0, 33170.0, 10744.0, 0.0, 31713.0, 12861.0, 3718.0, 3772.0, 7902.0, 5410.0, 11799.0, 10110.0, 35633.0, 13787.0, 9800.0, 11605.0, 8105.0, 26896.0, 12692.0, 18377.0, 18847.0, 3190.0, 9397.0, 16314.0, 5785.0, 9800.0, 9877.0, 21861.0, 9755.0, 14202.0, 17023.0, 10135.0, 7902.0, 12861.0, 17429.0, 15198.0], [18634.0, 19104.0, 30376.0, 22627.0, 4565.0, 27241.0, 33104.0, 0.0, 21958.0, 29663.0, 30912.0, 25959.0, 29460.0, 27114.0, 23349.0, 13244.0, 24612.0, 20109.0, 22230.0, 40847.0, 8961.0, 21609.0, 22002.0, 18491.0, 30698.0, 42139.0, 25044.0, 32416.0, 20109.0, 30216.0, 17504.0, 30093.0, 23980.0, 21025.0, 42878.0, 25959.0, 21958.0, 25741.0, 21658.0], [4382.0, 5964.0, 11373.0, 5175.0, 17801.0, 17681.0, 13241.0, 24872.0, 0.0, 13605.0, 12087.0, 7227.0, 13659.0, 18736.0, 17047.0, 28849.0, 4199.0, 3952.0, 18543.0, 20404.0, 19801.0, 14509.0, 8790.0, 10592.0, 14042.0, 21696.0, 5348.0, 8707.0, 3952.0, 19564.0, 12919.0, 19442.0, 6429.0, 15146.0, 16490.0, 7227.0, 0.0, 6462.0, 7815.0], [9693.0, 8688.0, 2891.0, 7272.0, 29728.0, 7302.0, 3718.0, 28271.0, 11962.0, 0.0, 1894.0, 9683.0, 1969.0, 8357.0, 6669.0, 32192.0, 12888.0, 8901.0, 8164.0, 11460.0, 23455.0, 9251.0, 17477.0, 19281.0, 1312.0, 12752.0, 15415.0, 4931.0, 8901.0, 9186.0, 20963.0, 9063.0, 13304.0, 13581.0, 13491.0, 9683.0, 11962.0, 16530.0, 14299.0], [9297.0, 8293.0, 2470.0, 6876.0, 31258.0, 8832.0, 3772.0, 29801.0, 11566.0, 1894.0, 0.0, 8488.0, 4785.0, 9887.0, 8198.0, 33722.0, 12492.0, 8505.0, 9694.0, 11515.0, 24985.0, 10781.0, 17083.0, 18885.0, 582.0, 12807.0, 15020.0, 4535.0, 8505.0, 10716.0, 20567.0, 10593.0, 12908.0, 15111.0, 13546.0, 8488.0, 11566.0, 16134.0, 13903.0], [8113.0, 8822.0, 7686.0, 3760.0, 21532.0, 13994.0, 8010.0, 34963.0, 6828.0, 9918.0, 8400.0, 0.0, 9972.0, 15049.0, 13360.0, 38883.0, 10094.0, 6183.0, 14855.0, 15173.0, 30146.0, 15942.0, 14684.0, 16488.0, 8811.0, 16466.0, 11372.0, 5020.0, 6183.0, 15877.0, 18375.0, 15755.0, 10699.0, 20273.0, 11400.0, 0.0, 6828.0, 12486.0, 11695.0], [8345.0, 7340.0, 1518.0, 5924.0, 30343.0, 7916.0, 4939.0, 28886.0, 10614.0, 2498.0, 2057.0, 7536.0, 0.0, 8972.0, 7283.0, 32806.0, 11540.0, 7553.0, 8778.0, 12682.0, 24069.0, 9865.0, 16130.0, 16600.0, 2533.0, 13974.0, 14067.0, 3583.0, 7553.0, 9800.0, 19614.0, 9677.0, 11955.0, 14196.0, 14713.0, 7536.0, 10614.0, 15182.0, 12951.0], [15144.0, 14139.0, 8342.0, 12723.0, 26744.0, 1465.0, 11070.0, 25287.0, 17413.0, 7629.0, 8878.0, 15134.0, 7426.0, 0.0, 5629.0, 29208.0, 18339.0, 14352.0, 6512.0, 17174.0, 20471.0, 9851.0, 22930.0, 24732.0, 8664.0, 18466.0, 20867.0, 10382.0, 14352.0, 5720.0, 25125.0, 5597.0, 18755.0, 12181.0, 20844.0, 15134.0, 17413.0, 21981.0, 19750.0], [14613.0, 13609.0, 7811.0, 12193.0, 25030.0, 4652.0, 10540.0, 23573.0, 16882.0, 7098.0, 8348.0, 14603.0, 6896.0, 4550.0, 0.0, 27494.0, 17809.0, 13822.0, 2046.0, 18282.0, 18757.0, 4992.0, 22397.0, 24201.0, 8134.0, 19574.0, 20336.0, 9852.0, 13822.0, 7651.0, 23000.0, 7529.0, 18224.0, 10467.0, 20313.0, 14603.0, 16882.0, 21451.0, 19220.0], [26086.0, 26557.0, 33281.0, 30079.0, 17762.0, 30147.0, 36010.0, 16318.0, 29410.0, 32569.0, 33818.0, 33411.0, 32366.0, 30020.0, 26255.0, 0.0, 28048.0, 27561.0, 25136.0, 43753.0, 11488.0, 28526.0, 28796.0, 28915.0, 33604.0, 45045.0, 30575.0, 35322.0, 27561.0, 33122.0, 27375.0, 32999.0, 26698.0, 23931.0, 45783.0, 33411.0, 29410.0, 31690.0, 25830.0], [5119.0, 6702.0, 12162.0, 7243.0, 15677.0, 18469.0, 14030.0, 23330.0, 4068.0, 14394.0, 12876.0, 10593.0, 14448.0, 19525.0, 17836.0, 27307.0, 0.0, 4886.0, 19331.0, 21193.0, 18258.0, 15247.0, 4696.0, 6500.0, 13377.0, 22485.0, 3106.0, 9496.0, 4886.0, 20353.0, 8827.0, 20231.0, 2335.0, 15884.0, 23224.0, 10593.0, 4068.0, 4242.0, 3722.0], [3024.0, 2026.0, 7880.0, 2944.0, 17739.0, 14188.0, 9749.0, 23548.0, 4502.0, 10113.0, 8595.0, 6246.0, 10166.0, 15243.0, 13555.0, 27525.0, 6545.0, 0.0, 15050.0, 16912.0, 18476.0, 11554.0, 11134.0, 12940.0, 9096.0, 18204.0, 9073.0, 5214.0, 0.0, 16072.0, 13320.0, 15949.0, 6932.0, 12191.0, 18943.0, 6246.0, 4502.0, 10187.0, 7957.0], [15973.0, 14969.0, 9171.0, 13553.0, 22113.0, 6012.0, 11900.0, 20656.0, 18242.0, 8458.0, 9708.0, 15964.0, 8256.0, 5910.0, 2046.0, 24577.0, 19169.0, 15182.0, 0.0, 19642.0, 15840.0, 5755.0, 23758.0, 19984.0, 9494.0, 20935.0, 21696.0, 11212.0, 15182.0, 9011.0, 20815.0, 8889.0, 19584.0, 7550.0, 21673.0, 15964.0, 18242.0, 22811.0, 20580.0], [17152.0, 16148.0, 13459.0, 14732.0, 31579.0, 14934.0, 7521.0, 38839.0, 19422.0, 10844.0, 10899.0, 14463.0, 12537.0, 15989.0, 17237.0, 42760.0, 20348.0, 16361.0, 18732.0, 0.0, 34023.0, 19819.0, 24937.0, 26741.0, 10317.0, 3768.0, 22875.0, 12346.0, 16361.0, 11181.0, 28422.0, 11058.0, 20763.0, 24149.0, 8340.0, 14463.0, 19422.0, 23990.0, 21759.0], [15781.0, 16251.0, 26139.0, 19773.0, 7456.0, 23004.0, 28868.0, 8305.0, 19104.0, 25426.0, 26676.0, 23105.0, 25224.0, 22878.0, 19113.0, 12282.0, 17743.0, 17255.0, 17994.0, 36610.0, 0.0, 17081.0, 18491.0, 17116.0, 26462.0, 37902.0, 20270.0, 20800.0, 17255.0, 25979.0, 17070.0, 25857.0, 16392.0, 16788.0, 38641.0, 23105.0, 19104.0, 21385.0, 15525.0], [10133.0, 9679.0, 10309.0, 13259.0, 18690.0, 8190.0, 13394.0, 23849.0, 13864.0, 9953.0, 10849.0, 14895.0, 9750.0, 9246.0, 4992.0, 27770.0, 14737.0, 11225.0, 5755.0, 21137.0, 19033.0, 0.0, 19022.0, 18229.0, 10988.0, 22429.0, 17264.0, 10918.0, 11225.0, 10074.0, 19060.0, 9951.0, 14829.0, 6721.0, 23167.0, 14895.0, 13864.0, 18379.0, 15825.0], [9187.0, 10771.0, 16230.0, 11312.0, 16077.0, 22538.0, 18099.0, 23282.0, 8137.0, 18463.0, 16944.0, 14661.0, 18516.0, 23593.0, 21905.0, 28956.0, 4688.0, 8954.0, 23400.0, 25262.0, 19908.0, 18802.0, 0.0, 4141.0, 17446.0, 26554.0, 4500.0, 13564.0, 8954.0, 24422.0, 6468.0, 24299.0, 4055.0, 19621.0, 27292.0, 14661.0, 8137.0, 5056.0, 3072.0], [9296.0, 11975.0, 18290.0, 13371.0, 17136.0, 24597.0, 18849.0, 19540.0, 10196.0, 20522.0, 19004.0, 16721.0, 20575.0, 25652.0, 23964.0, 28696.0, 6747.0, 11013.0, 25459.0, 27321.0, 23691.0, 19168.0, 4137.0, 0.0, 19505.0, 28613.0, 7178.0, 15624.0, 11013.0, 26481.0, 2726.0, 26358.0, 5175.0, 17787.0, 29352.0, 16721.0, 10196.0, 7875.0, 3792.0], [9805.0, 8800.0, 2978.0, 7384.0, 30764.0, 8338.0, 3190.0, 29307.0, 12074.0, 1312.0, 582.0, 9230.0, 3004.0, 9393.0, 7704.0, 33227.0, 13000.0, 9013.0, 9199.0, 10933.0, 24490.0, 10286.0, 17591.0, 18060.0, 0.0, 12225.0, 15527.0, 5043.0, 9013.0, 10221.0, 21075.0, 10099.0, 13416.0, 14617.0, 12963.0, 9230.0, 12074.0, 16642.0, 14411.0], [19785.0, 18781.0, 16091.0, 17364.0, 34212.0, 17567.0, 10154.0, 41472.0, 22054.0, 13477.0, 13531.0, 17095.0, 15170.0, 18622.0, 19869.0, 45392.0, 22980.0, 18993.0, 21364.0, 3242.0, 36655.0, 22451.0, 27571.0, 29375.0, 12949.0, 0.0, 25508.0, 14979.0, 18993.0, 13813.0, 31055.0, 13691.0, 23396.0, 26782.0, 7467.0, 17095.0, 22054.0, 26622.0, 24392.0], [7622.0, 9204.0, 14664.0, 9746.0, 16816.0, 20972.0, 16533.0, 26320.0, 5084.0, 16897.0, 15379.0, 11525.0, 16950.0, 22027.0, 20339.0, 30014.0, 3148.0, 7388.0, 21834.0, 23696.0, 20965.0, 17749.0, 4451.0, 7179.0, 15880.0, 24988.0, 0.0, 11998.0, 7388.0, 22856.0, 9506.0, 22733.0, 4323.0, 18386.0, 20788.0, 11525.0, 5084.0, 1300.0, 4641.0], [6078.0, 5074.0, 3728.0, 3658.0, 20505.0, 10128.0, 5764.0, 31097.0, 8347.0, 6052.0, 4442.0, 6086.0, 6106.0, 11183.0, 9494.0, 35017.0, 9274.0, 5287.0, 10989.0, 12927.0, 26280.0, 12076.0, 13864.0, 15666.0, 4912.0, 14219.0, 11801.0, 0.0, 5287.0, 12011.0, 17348.0, 11889.0, 9689.0, 16407.0, 14958.0, 6086.0, 8347.0, 12916.0, 10685.0], [3024.0, 2026.0, 7880.0, 2944.0, 17739.0, 14188.0, 9749.0, 23548.0, 4502.0, 10113.0, 8595.0, 6246.0, 10166.0, 15243.0, 13555.0, 27525.0, 6545.0, 0.0, 15050.0, 16912.0, 18476.0, 11554.0, 11134.0, 12940.0, 9096.0, 18204.0, 9073.0, 5214.0, 0.0, 16072.0, 13320.0, 15949.0, 6932.0, 12191.0, 18943.0, 6246.0, 4502.0, 10187.0, 7957.0], [15784.0, 14780.0, 8982.0, 13364.0, 31458.0, 4056.0, 9830.0, 30001.0, 18053.0, 8269.0, 9519.0, 15775.0, 8067.0, 5111.0, 8398.0, 33921.0, 18980.0, 14993.0, 9894.0, 11723.0, 25184.0, 9972.0, 23570.0, 25372.0, 9305.0, 13015.0, 21507.0, 11023.0, 14993.0, 0.0, 25246.0, 146.0, 19395.0, 14302.0, 15531.0, 15775.0, 18053.0, 22622.0, 20391.0], [11019.0, 12153.0, 20430.0, 15512.0, 12023.0, 23624.0, 22299.0, 18832.0, 12337.0, 22663.0, 21145.0, 18861.0, 22716.0, 24679.0, 22628.0, 24851.0, 8888.0, 13154.0, 21509.0, 29462.0, 15803.0, 19204.0, 6277.0, 2766.0, 21646.0, 30754.0, 9319.0, 17764.0, 13154.0, 25508.0, 0.0, 25385.0, 7315.0, 17839.0, 31493.0, 18861.0, 12337.0, 10016.0, 5933.0], [16726.0, 15722.0, 9924.0, 14305.0, 25818.0, 4998.0, 9683.0, 30943.0, 18995.0, 9211.0, 10460.0, 16716.0, 9009.0, 6053.0, 9340.0, 34863.0, 19921.0, 15934.0, 10835.0, 11577.0, 26126.0, 10913.0, 24512.0, 26316.0, 10247.0, 12869.0, 22449.0, 11965.0, 15934.0, 1244.0, 26187.0, 0.0, 20337.0, 15244.0, 15384.0, 16716.0, 18995.0, 23563.0, 21333.0], [4788.0, 6371.0, 12472.0, 7553.0, 13574.0, 18780.0, 14340.0, 22477.0, 6025.0, 14704.0, 13186.0, 10903.0, 14758.0, 19835.0, 18146.0, 26454.0, 2576.0, 5196.0, 19642.0, 21504.0, 17406.0, 14916.0, 4555.0, 5085.0, 13688.0, 22796.0, 4266.0, 9806.0, 5196.0, 20663.0, 7412.0, 20541.0, 0.0, 15553.0, 23534.0, 10903.0, 6025.0, 5399.0, 1437.0], [12738.0, 12283.0, 13675.0, 18056.0, 18972.0, 10540.0, 16403.0, 17514.0, 16469.0, 12962.0, 14211.0, 20467.0, 12760.0, 10414.0, 6648.0, 21435.0, 16149.0, 13830.0, 5530.0, 24146.0, 12698.0, 8060.0, 19928.0, 18134.0, 13997.0, 25438.0, 18676.0, 15715.0, 13830.0, 13515.0, 18965.0, 13393.0, 16055.0, 0.0, 26177.0, 20467.0, 16469.0, 19791.0, 17005.0], [17372.0, 18755.0, 16066.0, 17339.0, 30792.0, 19325.0, 10128.0, 41447.0, 16087.0, 13452.0, 13506.0, 11395.0, 15144.0, 20380.0, 19844.0, 45367.0, 22955.0, 18968.0, 21339.0, 8938.0, 36630.0, 22426.0, 27546.0, 29348.0, 12924.0, 10230.0, 19151.0, 14954.0, 18968.0, 15571.0, 31030.0, 15448.0, 23371.0, 26757.0, 0.0, 11395.0, 16087.0, 20083.0, 24366.0], [8113.0, 8822.0, 7686.0, 3760.0, 21532.0, 13994.0, 8010.0, 34963.0, 6828.0, 9918.0, 8400.0, 0.0, 9972.0, 15049.0, 13360.0, 38883.0, 10094.0, 6183.0, 14855.0, 15173.0, 30146.0, 15942.0, 14684.0, 16488.0, 8811.0, 16466.0, 11372.0, 5020.0, 6183.0, 15877.0, 18375.0, 15755.0, 10699.0, 20273.0, 11400.0, 0.0, 6828.0, 12486.0, 11695.0], [4382.0, 5964.0, 11373.0, 5175.0, 17801.0, 17681.0, 13241.0, 24872.0, 0.0, 13605.0, 12087.0, 7227.0, 13659.0, 18736.0, 17047.0, 28849.0, 4199.0, 3952.0, 18543.0, 20404.0, 19801.0, 14509.0, 8790.0, 10592.0, 14042.0, 21696.0, 5348.0, 8707.0, 3952.0, 19564.0, 12919.0, 19442.0, 6429.0, 15146.0, 16490.0, 7227.0, 0.0, 6462.0, 7815.0], [8509.0, 10091.0, 15552.0, 10633.0, 17977.0, 21860.0, 17420.0, 26720.0, 5971.0, 17784.0, 16266.0, 12412.0, 17838.0, 22915.0, 21226.0, 30697.0, 4035.0, 8276.0, 22721.0, 24583.0, 21648.0, 18637.0, 5049.0, 8029.0, 18221.0, 25875.0, 1300.0, 12886.0, 8276.0, 23743.0, 10195.0, 23621.0, 5371.0, 19274.0, 21675.0, 12412.0, 5971.0, 0.0, 5340.0], [5703.0, 7287.0, 13387.0, 8469.0, 12690.0, 19695.0, 15256.0, 21592.0, 7639.0, 15620.0, 14101.0, 11818.0, 15673.0, 20750.0, 19062.0, 25569.0, 4189.0, 6111.0, 20557.0, 22419.0, 16521.0, 15831.0, 3182.0, 3711.0, 14603.0, 23711.0, 4813.0, 10721.0, 6111.0, 21579.0, 6038.0, 21456.0, 1582.0, 16139.0, 24449.0, 11818.0, 7639.0, 6180.0, 0.0]]
    time_matrix=[[0.0, 470.0, 1300.0, 726.0, 2554.0, 1984.0, 1530.0, 3148.0, 730.0, 1507.0, 1436.0, 1152.0, 1533.0, 2199.0, 1828.0, 3396.0, 871.0, 354.0, 1924.0, 2345.0, 2660.0, 1961.0, 1696.0, 1865.0, 1519.0, 2358.0, 1315.0, 871.0, 354.0, 2209.0, 2037.0, 2168.0, 990.0, 2023.0, 2409.0, 1152.0, 730.0, 1540.0, 1186.0], [366.0, 0.0, 1210.0, 729.0, 2861.0, 1894.0, 1440.0, 3286.0, 956.0, 1418.0, 1346.0, 1316.0, 1443.0, 2109.0, 1738.0, 3524.0, 1101.0, 469.0, 1834.0, 2254.0, 2806.0, 1782.0, 1909.0, 2147.0, 1429.0, 2268.0, 1548.0, 781.0, 469.0, 2119.0, 2318.0, 2077.0, 1284.0, 1845.0, 2328.0, 1316.0, 956.0, 1774.0, 1478.0], [1108.0, 950.0, 0.0, 695.0, 3473.0, 1207.0, 950.0, 3260.0, 1414.0, 791.0, 583.0, 1027.0, 756.0, 1422.0, 1051.0, 3541.0, 1541.0, 921.0, 1148.0, 1766.0, 2756.0, 1654.0, 2368.0, 2555.0, 791.0, 1779.0, 1989.0, 455.0, 921.0, 1432.0, 3064.0, 1390.0, 1791.0, 2054.0, 1838.0, 1027.0, 1414.0, 2210.0, 1989.0], [868.0, 760.0, 995.0, 0.0, 3300.0, 1680.0, 1225.0, 3733.0, 1068.0, 1205.0, 1129.0, 633.0, 1230.0, 1895.0, 1524.0, 4013.0, 1253.0, 559.0, 1622.0, 2042.0, 3228.0, 2127.0, 2062.0, 2378.0, 1213.0, 2055.0, 1704.0, 566.0, 559.0, 1905.0, 2784.0, 1863.0, 1508.0, 2473.0, 2105.0, 633.0, 1068.0, 1925.0, 1702.0], [2660.0, 2849.0, 3495.0, 3279.0, 0.0, 3319.0, 4099.0, 1038.0, 3283.0, 3462.0, 3654.0, 3698.0, 3493.0, 3439.0, 2814.0, 2019.0, 2895.0, 2908.0, 2706.0, 4906.0, 1292.0, 3205.0, 2841.0, 2353.0, 3634.0, 4927.0, 3338.0, 3366.0, 2908.0, 3629.0, 1993.0, 3589.0, 2769.0, 2692.0, 4968.0, 3698.0, 3283.0, 3666.0, 2549.0], [2014.0, 1858.0, 1065.0, 1602.0, 3316.0, 0.0, 1633.0, 3108.0, 2322.0, 1030.0, 1220.0, 2000.0, 1060.0, 382.0, 932.0, 3388.0, 2442.0, 1831.0, 1030.0, 2485.0, 2599.0, 1524.0, 3250.0, 3463.0, 1202.0, 2499.0, 2897.0, 1362.0, 1831.0, 692.0, 3820.0, 651.0, 2696.0, 1915.0, 2542.0, 2000.0, 2322.0, 3118.0, 2895.0], [1622.0, 1461.0, 1145.0, 1210.0, 4031.0, 1766.0, 0.0, 3816.0, 1930.0, 787.0, 862.0, 1283.0, 1078.0, 1980.0, 1609.0, 4098.0, 2050.0, 1437.0, 1707.0, 1159.0, 3314.0, 2210.0, 2858.0, 3175.0, 695.0, 1172.0, 2497.0, 947.0, 1437.0, 1683.0, 3579.0, 1676.0, 2305.0, 2607.0, 1221.0, 1283.0, 1930.0, 2717.0, 2504.0], [3235.0, 3333.0, 3517.0, 3857.0, 1090.0, 3341.0, 4087.0, 0.0, 3852.0, 3484.0, 3674.0, 4280.0, 3515.0, 3470.0, 2840.0, 1956.0, 3418.0, 3484.0, 2728.0, 4931.0, 1463.0, 3681.0, 2982.0, 2502.0, 3657.0, 4945.0, 3646.0, 3817.0, 3484.0, 3652.0, 2324.0, 3612.0, 3343.0, 2602.0, 4996.0, 4280.0, 3852.0, 3807.0, 3021.0], [859.0, 1158.0, 1854.0, 1133.0, 3291.0, 2539.0, 2084.0, 3884.0, 0.0, 2064.0, 1987.0, 1350.0, 2088.0, 2753.0, 2377.0, 4125.0, 930.0, 909.0, 2480.0, 2901.0, 3396.0, 2648.0, 1738.0, 1945.0, 2237.0, 2914.0, 1132.0, 1425.0, 909.0, 2763.0, 2416.0, 2721.0, 1290.0, 2696.0, 2615.0, 1350.0, 0.0, 1353.0, 1510.0], [1411.0, 1253.0, 461.0, 998.0, 3397.0, 1132.0, 753.0, 3180.0, 1727.0, 0.0, 490.0, 1395.0, 442.0, 1347.0, 975.0, 3462.0, 1845.0, 1227.0, 1072.0, 1599.0, 2681.0, 1579.0, 2672.0, 2858.0, 321.0, 1612.0, 2293.0, 759.0, 1227.0, 1354.0, 3372.0, 1315.0, 2094.0, 1979.0, 1669.0, 1395.0, 1727.0, 2506.0, 2290.0], [1427.0, 1269.0, 471.0, 1014.0, 3646.0, 1382.0, 850.0, 3436.0, 1734.0, 506.0, 0.0, 1395.0, 901.0, 1597.0, 1224.0, 3716.0, 1860.0, 1242.0, 1322.0, 1698.0, 2929.0, 1830.0, 2663.0, 2874.0, 201.0, 1709.0, 2302.0, 774.0, 1242.0, 1605.0, 3384.0, 1563.0, 2110.0, 2222.0, 1768.0, 1395.0, 1734.0, 2521.0, 2306.0], [1278.0, 1350.0, 1253.0, 657.0, 3710.0, 1938.0, 1390.0, 3988.0, 1269.0, 1463.0, 1386.0, 0.0, 1487.0, 2152.0, 1781.0, 4270.0, 1682.0, 1220.0, 1879.0, 2207.0, 3486.0, 2382.0, 2490.0, 2677.0, 1543.0, 2220.0, 2041.0, 836.0, 1220.0, 2162.0, 3193.0, 2120.0, 1976.0, 2779.0, 1889.0, 0.0, 1269.0, 2261.0, 2176.0], [1323.0, 1165.0, 368.0, 910.0, 3589.0, 1323.0, 1130.0, 3372.0, 1639.0, 696.0, 478.0, 1291.0, 0.0, 1536.0, 1165.0, 3654.0, 1757.0, 1137.0, 1263.0, 1975.0, 2872.0, 1771.0, 2559.0, 2875.0, 695.0, 1985.0, 2205.0, 671.0, 1137.0, 1546.0, 3285.0, 1504.0, 2006.0, 2170.0, 2048.0, 1291.0, 1639.0, 2418.0, 2205.0], [2206.0, 2048.0, 1255.0, 1793.0, 3235.0, 482.0, 1824.0, 3023.0, 2521.0, 1223.0, 1413.0, 2189.0, 1252.0, 0.0, 910.0, 3303.0, 2639.0, 2021.0, 1120.0, 2729.0, 2514.0, 1766.0, 3442.0, 3653.0, 1394.0, 2755.0, 3081.0, 1555.0, 2021.0, 935.0, 4063.0, 894.0, 2889.0, 1843.0, 2734.0, 2189.0, 2521.0, 3301.0, 3085.0], [1976.0, 1815.0, 1024.0, 1564.0, 2927.0, 843.0, 1592.0, 2715.0, 2290.0, 992.0, 1182.0, 1958.0, 1021.0, 977.0, 0.0, 2996.0, 2408.0, 1790.0, 399.0, 2441.0, 2209.0, 1246.0, 3234.0, 3421.0, 1164.0, 2451.0, 2851.0, 1322.0, 1790.0, 1160.0, 3771.0, 1118.0, 2657.0, 1536.0, 2504.0, 1958.0, 2290.0, 3076.0, 2858.0], [3509.0, 3602.0, 3543.0, 4130.0, 2166.0, 3369.0, 4113.0, 1984.0, 4133.0, 3512.0, 3703.0, 4555.0, 3542.0, 3487.0, 2867.0, 0.0, 3906.0, 3756.0, 2756.0, 4958.0, 1446.0, 3498.0, 4095.0, 3779.0, 3684.0, 4972.0, 4355.0, 3843.0, 3756.0, 3677.0, 3667.0, 3635.0, 3810.0, 2630.0, 5031.0, 4555.0, 4133.0, 4575.0, 3595.0], [951.0, 1235.0, 1854.0, 1280.0, 3039.0, 2539.0, 2084.0, 3651.0, 870.0, 2065.0, 1988.0, 1779.0, 2089.0, 2754.0, 2383.0, 3900.0, 0.0, 913.0, 2481.0, 2901.0, 3171.0, 2724.0, 881.0, 1068.0, 2072.0, 2915.0, 582.0, 1425.0, 913.0, 2764.0, 1541.0, 2722.0, 433.0, 2788.0, 2964.0, 1779.0, 870.0, 804.0, 654.0], [603.0, 451.0, 1142.0, 566.0, 3248.0, 1826.0, 1371.0, 3662.0, 1039.0, 1351.0, 1277.0, 1159.0, 1374.0, 2040.0, 1669.0, 3911.0, 1267.0, 0.0, 1765.0, 2188.0, 3183.0, 2103.0, 2094.0, 2259.0, 1358.0, 2200.0, 1715.0, 712.0, 0.0, 2050.0, 2562.0, 2008.0, 1458.0, 2180.0, 2259.0, 1159.0, 1039.0, 1931.0, 1718.0], [2132.0, 1973.0, 1180.0, 1720.0, 2583.0, 999.0, 1749.0, 2371.0, 2446.0, 1147.0, 1339.0, 2114.0, 1177.0, 1133.0, 418.0, 2651.0, 2564.0, 1946.0, 0.0, 2594.0, 1864.0, 1243.0, 3391.0, 3635.0, 1319.0, 2607.0, 3012.0, 1480.0, 1946.0, 1316.0, 3552.0, 1274.0, 2813.0, 1191.0, 2660.0, 2114.0, 2446.0, 3233.0, 3014.0], [2414.0, 2255.0, 2007.0, 2000.0, 4888.0, 2420.0, 1138.0, 4731.0, 2729.0, 1697.0, 1775.0, 2075.0, 1991.0, 2635.0, 2522.0, 5011.0, 2847.0, 2229.0, 2617.0, 0.0, 4226.0, 3125.0, 3674.0, 3860.0, 1608.0, 566.0, 3295.0, 1736.0, 2229.0, 1813.0, 4375.0, 1807.0, 3096.0, 3525.0, 1059.0, 2075.0, 2729.0, 3515.0, 3292.0], [2498.0, 2590.0, 2924.0, 3119.0, 1154.0, 2745.0, 3493.0, 1200.0, 3114.0, 2890.0, 3080.0, 3542.0, 2920.0, 2869.0, 2243.0, 1450.0, 2895.0, 2744.0, 2130.0, 4339.0, 0.0, 2873.0, 3082.0, 2912.0, 3062.0, 4352.0, 3337.0, 3233.0, 2744.0, 3058.0, 2659.0, 3015.0, 2798.0, 2002.0, 4402.0, 3542.0, 3114.0, 3557.0, 2578.0], [1919.0, 1797.0, 1791.0, 2204.0, 3341.0, 1416.0, 2365.0, 3055.0, 2636.0, 1764.0, 1901.0, 2525.0, 1794.0, 1631.0, 1300.0, 3331.0, 2791.0, 2128.0, 1291.0, 3211.0, 2547.0, 0.0, 3615.0, 3433.0, 1936.0, 3224.0, 3239.0, 1964.0, 2128.0, 1641.0, 3347.0, 1599.0, 2908.0, 1299.0, 3283.0, 2525.0, 2636.0, 3459.0, 3107.0], [1768.0, 2047.0, 2667.0, 2095.0, 2993.0, 3352.0, 2897.0, 3293.0, 1680.0, 2877.0, 2804.0, 2594.0, 2901.0, 3566.0, 3196.0, 4077.0, 984.0, 1729.0, 3293.0, 3714.0, 3349.0, 3485.0, 0.0, 730.0, 2887.0, 3727.0, 993.0, 2238.0, 1729.0, 3577.0, 1200.0, 3536.0, 918.0, 3392.0, 3786.0, 2594.0, 1680.0, 1121.0, 726.0], [1877.0, 2075.0, 2837.0, 2261.0, 2547.0, 3520.0, 3124.0, 2696.0, 1847.0, 3043.0, 2972.0, 2762.0, 3069.0, 3733.0, 3362.0, 3804.0, 1149.0, 1892.0, 3460.0, 3880.0, 3182.0, 3544.0, 724.0, 0.0, 3055.0, 3894.0, 1388.0, 2407.0, 1892.0, 3745.0, 606.0, 3703.0, 1052.0, 3260.0, 3954.0, 2762.0, 1847.0, 1549.0, 764.0], [1466.0, 1305.0, 510.0, 1052.0, 3552.0, 1286.0, 650.0, 3334.0, 1781.0, 305.0, 168.0, 1461.0, 596.0, 1501.0, 1130.0, 3617.0, 1899.0, 1281.0, 1226.0, 1495.0, 2835.0, 1734.0, 2702.0, 3019.0, 0.0, 1508.0, 2347.0, 813.0, 1281.0, 1509.0, 3426.0, 1469.0, 2148.0, 2133.0, 1560.0, 1461.0, 1781.0, 2567.0, 2344.0], [2761.0, 2600.0, 2357.0, 2349.0, 5235.0, 2746.0, 1487.0, 5076.0, 3069.0, 2047.0, 2122.0, 2422.0, 2338.0, 2961.0, 2869.0, 5358.0, 3189.0, 2575.0, 2967.0, 577.0, 4574.0, 3470.0, 3997.0, 4183.0, 1955.0, 0.0, 3636.0, 2085.0, 2575.0, 2142.0, 4718.0, 2135.0, 3443.0, 3867.0, 1181.0, 2422.0, 3069.0, 3856.0, 3643.0], [1382.0, 1681.0, 2279.0, 1709.0, 3306.0, 2967.0, 2512.0, 3974.0, 1009.0, 2489.0, 2418.0, 2003.0, 2514.0, 3181.0, 2810.0, 4311.0, 638.0, 1338.0, 2906.0, 3327.0, 3572.0, 3149.0, 1018.0, 1413.0, 2501.0, 3341.0, 0.0, 1853.0, 1338.0, 3189.0, 1884.0, 3150.0, 839.0, 3233.0, 3267.0, 2003.0, 1009.0, 262.0, 980.0], [1048.0, 890.0, 678.0, 633.0, 3530.0, 1402.0, 938.0, 3455.0, 1353.0, 927.0, 811.0, 1015.0, 950.0, 1617.0, 1245.0, 3735.0, 1482.0, 864.0, 1344.0, 1753.0, 2950.0, 1849.0, 2281.0, 2495.0, 1021.0, 1767.0, 1929.0, 0.0, 864.0, 1626.0, 3002.0, 1585.0, 1728.0, 2243.0, 1816.0, 1015.0, 1353.0, 2140.0, 1927.0], [603.0, 451.0, 1142.0, 566.0, 3248.0, 1826.0, 1371.0, 3662.0, 1039.0, 1351.0, 1277.0, 1159.0, 1374.0, 2040.0, 1669.0, 3911.0, 1267.0, 0.0, 1765.0, 2188.0, 3183.0, 2103.0, 2094.0, 2259.0, 1358.0, 2200.0, 1715.0, 712.0, 0.0, 2050.0, 2562.0, 2008.0, 1458.0, 2180.0, 2259.0, 1159.0, 1039.0, 1931.0, 1718.0], [2152.0, 1990.0, 1202.0, 1740.0, 3673.0, 686.0, 1658.0, 3466.0, 2459.0, 1168.0, 1358.0, 2138.0, 1198.0, 900.0, 1256.0, 3746.0, 2579.0, 1970.0, 1350.0, 1866.0, 2956.0, 1663.0, 3388.0, 3602.0, 1340.0, 1880.0, 3036.0, 1500.0, 1970.0, 0.0, 3955.0, 32.0, 2834.0, 2053.0, 2124.0, 2138.0, 2459.0, 3257.0, 3034.0], [2145.0, 2324.0, 3298.0, 2724.0, 2307.0, 3788.0, 3527.0, 2650.0, 2308.0, 3504.0, 3430.0, 3223.0, 3530.0, 4003.0, 3687.0, 3570.0, 1610.0, 2358.0, 3576.0, 4342.0, 2842.0, 3413.0, 1185.0, 697.0, 3514.0, 4357.0, 1849.0, 2868.0, 2358.0, 4013.0, 0.0, 3971.0, 1516.0, 3056.0, 4406.0, 3223.0, 2308.0, 2010.0, 1225.0], [2269.0, 2108.0, 1320.0, 1857.0, 4066.0, 803.0, 1626.0, 3575.0, 2577.0, 1285.0, 1475.0, 2255.0, 1315.0, 1018.0, 1369.0, 3858.0, 2697.0, 2083.0, 1467.0, 1835.0, 3073.0, 1773.0, 3505.0, 3691.0, 1457.0, 1848.0, 3144.0, 1617.0, 2083.0, 199.0, 4072.0, 0.0, 2951.0, 2170.0, 2092.0, 2255.0, 2577.0, 3364.0, 3151.0], [1047.0, 1331.0, 2064.0, 1492.0, 2742.0, 2749.0, 2294.0, 3580.0, 1277.0, 2275.0, 2198.0, 1989.0, 2299.0, 2964.0, 2593.0, 3829.0, 578.0, 1123.0, 2691.0, 3111.0, 3101.0, 2821.0, 1012.0, 1071.0, 2282.0, 3125.0, 862.0, 1635.0, 1123.0, 2974.0, 1544.0, 2932.0, 0.0, 2884.0, 3174.0, 1989.0, 1277.0, 1166.0, 400.0], [2131.0, 2007.0, 1625.0, 2162.0, 2158.0, 1445.0, 2193.0, 1941.0, 2854.0, 1590.0, 1780.0, 2560.0, 1620.0, 1569.0, 943.0, 2224.0, 2982.0, 2339.0, 830.0, 3039.0, 1439.0, 1453.0, 3596.0, 3413.0, 1762.0, 3053.0, 3424.0, 1922.0, 2339.0, 1758.0, 3333.0, 1716.0, 2987.0, 0.0, 3102.0, 2560.0, 2854.0, 3644.0, 3077.0], [2579.0, 2367.0, 2118.0, 2112.0, 5028.0, 2722.0, 1240.0, 4829.0, 2570.0, 1808.0, 1885.0, 1972.0, 2100.0, 2971.0, 2633.0, 5123.0, 2958.0, 2341.0, 2729.0, 1111.0, 4338.0, 3223.0, 3750.0, 3972.0, 1708.0, 1124.0, 3120.0, 1848.0, 2341.0, 2149.0, 4471.0, 2111.0, 3196.0, 3620.0, 0.0, 1972.0, 2570.0, 3309.0, 3396.0], [1278.0, 1350.0, 1253.0, 657.0, 3710.0, 1938.0, 1390.0, 3988.0, 1269.0, 1463.0, 1386.0, 0.0, 1487.0, 2152.0, 1781.0, 4270.0, 1682.0, 1220.0, 1879.0, 2207.0, 3486.0, 2382.0, 2490.0, 2677.0, 1543.0, 2220.0, 2041.0, 836.0, 1220.0, 2162.0, 3193.0, 2120.0, 1976.0, 2779.0, 1889.0, 0.0, 1269.0, 2261.0, 2176.0], [859.0, 1158.0, 1854.0, 1133.0, 3291.0, 2539.0, 2084.0, 3884.0, 0.0, 2064.0, 1987.0, 1350.0, 2088.0, 2753.0, 2377.0, 4125.0, 930.0, 909.0, 2480.0, 2901.0, 3396.0, 2648.0, 1738.0, 1945.0, 2237.0, 2914.0, 1132.0, 1425.0, 909.0, 2763.0, 2416.0, 2721.0, 1290.0, 2696.0, 2615.0, 1350.0, 0.0, 1353.0, 1510.0], [1647.0, 1935.0, 2536.0, 1978.0, 3574.0, 3220.0, 2781.0, 4343.0, 1270.0, 2761.0, 2684.0, 2257.0, 2768.0, 3435.0, 3063.0, 4590.0, 891.0, 1596.0, 3160.0, 3597.0, 3862.0, 3421.0, 1125.0, 1563.0, 2934.0, 3594.0, 292.0, 2106.0, 1596.0, 3445.0, 2075.0, 3403.0, 1080.0, 3484.0, 3526.0, 2257.0, 1270.0, 0.0, 1209.0], [1242.0, 1526.0, 2253.0, 1679.0, 2492.0, 2936.0, 2482.0, 3329.0, 1556.0, 2459.0, 2393.0, 2183.0, 2485.0, 3159.0, 2780.0, 3576.0, 858.0, 1318.0, 2886.0, 3306.0, 2848.0, 3026.0, 673.0, 714.0, 2471.0, 3311.0, 1114.0, 1830.0, 1318.0, 3161.0, 1184.0, 3120.0, 418.0, 2806.0, 3369.0, 2183.0, 1556.0, 1316.0, 0.0]]
    return distance_matrix,time_matrix



    # measure_type = data["measure_type"]
    # max_elements = 100
    # num_addresses = len(addresses)  # 16 in this example.
    # max_cols = 25
    # if num_addresses <= 25:
    #     max_rows = max_elements // num_addresses
    # else:
    #     max_rows = max_elements // max_cols
    #
    # # print("max rows"+str(max_rows))
    #
    # qr, rr = divmod(num_addresses, max_rows)
    # qc, rc = divmod(num_addresses, max_cols)
    # # print("qr: "+str(qr) +"  "+"  rr: "+ str(rr))
    # # print("qc: " + str(qc) +"  "+"  rc: " + str(rc))
    # distance_matrix_1 = []
    # time_matrix_1 = []
    # distance_matrix_2 = []
    # time_matrix_2 = []
    # distance_matrix = []
    # time_matrix = []
    # if num_addresses <= 25:
    #     dest_addresses = addresses
    #     for i in range(qr):
    #         # print("Calling for the ",i,"th time")
    #         origin_addresses = addresses[i * max_rows: (i + 1) * max_rows]
    #         # print("origin add= \n",origin_addresses)
    #         response = send_request(origin_addresses, dest_addresses, API_key, trip_start)
    #         # print(response)
    #
    #         distance_matrix += build_distance_matrix(response, 'distance')
    #
    #         time_matrix += build_distance_matrix(response, 'duration')
    #
    #         # print("distance matrix: ", response)
    #
    #     # Get the remaining remaining r rows, if necessary.
    #     if rr > 0:
    #         origin_addresses = addresses[qr * max_rows: qr * max_rows + rr]
    #         response = send_request(origin_addresses, dest_addresses, API_key, trip_start)
    #
    #         distance_matrix += build_distance_matrix(response, 'distance')
    #
    #         time_matrix += build_distance_matrix(response, 'duration')
    #
    #     return distance_matrix, time_matrix
    #
    # else:
    #     for i in range(qr):
    #         # print(i)
    #         origin_addresses = addresses[i * max_rows: (i + 1) * max_rows]
    #
    #         for j in range(qc):
    #             # print(j)
    #             # print("Calling for the ",i,"th time")
    #             dest_addresses = addresses[j * max_cols: (j + 1) * max_cols]
    #
    #             response = send_request(origin_addresses, dest_addresses, API_key, trip_start)
    #
    #             distance_matrix_1 += build_distance_matrix(response, 'distance')
    #             time_matrix_1 += build_distance_matrix(response, 'duration')
    #             # print("origin add= \n",origin_addresses)
    #         if rc > 0:
    #             dest_addresses = addresses[qc * max_cols: qc * max_cols + rc]
    #             response = send_request(origin_addresses, dest_addresses, API_key, trip_start)
    #             distance_matrix_2 += build_distance_matrix(response, 'distance')
    #             time_matrix_2 += build_distance_matrix(response, 'duration')
    #
    #         # print("distance matrix: ", response)
    #
    #     # Get the remaining remaining r rows, if necessary.
    #     if rr > 0:
    #         origin_addresses = addresses[qr * max_rows: qr * max_rows + rr]
    #         for j in range(qc):
    #             dest_addresses = addresses[j * max_cols: (j + 1) * max_cols]
    #             response = send_request(origin_addresses, dest_addresses, API_key, trip_start)
    #             distance_matrix_1 += build_distance_matrix(response, 'distance')
    #             time_matrix_1 += build_distance_matrix(response, 'duration')
    #         if rc > 0:
    #             dest_addresses = addresses[qc * max_cols: qc * max_cols + rc]
    #             response = send_request(origin_addresses, dest_addresses, API_key, trip_start)
    #             distance_matrix_2 += build_distance_matrix(response, 'distance')
    #             time_matrix_2 += build_distance_matrix(response, 'duration')
    #
    #     distance_matrix = addTheMatrix(distance_matrix_1,distance_matrix_2)
    #     time_matrix = addTheMatrix(time_matrix_1,time_matrix_2)
    #     return distance_matrix, time_matrix

def convert_to_time(start_time, time_sec):
    start_time = to_time(start_time)
    time_arr = start_time + timedelta(seconds=time_sec)
    time_arr = time_arr.strftime("%H:%M:%S")
    return time_arr

def convert_wait_time(time_sec):
    time_arr = dt.timedelta(seconds=time_sec)
    time_arr = str(time_arr)
    # time_arr = time_arr.strftime("%H:%M:%S")
    return time_arr

def print_solution_to_dict(data, solution, manager, routing, max_dist, dist_matrix, time_matrix):

    dict1 = {
        "solution_summary": {"total_time": "", "max_dist": max_dist},
        "dist_matrix": dist_matrix,
        "time_matrix": time_matrix,

    }

    trip_start = data["trip_time"]
    time_dimension = routing.GetDimensionOrDie('Time')
    total_time = 0
    list1 = []
    no_of_vehicles = 1
    measure_type = data['measure_type']

    for vehicle_id in range(len(data['vehicle_id'])):
        posn = 0
        distance = 0
        totdist = 0
        index = routing.Start(vehicle_id)
        dict2 = {}
        list_new = []
        dict2["vehicle_id"] = data['vehicle_id'][vehicle_id]

        while not routing.IsEnd(index):
            dict3 = {}
            time_var = time_dimension.CumulVar(index)

            dict3["customer_name*"] = data['names'][manager.IndexToNode(index)]
            dict3["sequence"] = posn
            dict3["latitude"] = data["latitude"][manager.IndexToNode(index)]
            dict3["longitude"] = data["longitude"][manager.IndexToNode(index)]
            dict3["customer_id"] = data['cust_id'][manager.IndexToNode(index)]
            dict3["wait_time"] = convert_wait_time(data['wait_time'][manager.IndexToNode(index)])
            if measure_type == 'duration':
                dict3["time"] = str(dt.timedelta(seconds=distance))
                dict3["cum_time"] = str(dt.timedelta(seconds=totdist))
                # dict3["time_window"] = '{0},{1}'.format(convert_to_time(trip_start, solution.Min(time_var)),
                #                                         convert_to_time(trip_start, solution.Max(time_var)))
            else:
                dict3["distance"] = distance
                dict3["cum_dist"] = totdist
            previous_index = index

            index = solution.Value(routing.NextVar(index))
            pnode = manager.IndexToNode(previous_index)
            node = manager.IndexToNode(index)
            print("vehicle id is {}, Index Node is {} Prev Node is {} ".format(vehicle_id,node,pnode))
            if node == 0:
                distance = time_matrix[pnode][0]
            else:
                distance = routing.GetArcCostForVehicle(previous_index, index, vehicle_id)
            totdist = totdist + distance
            list_new.append(dict3)
            posn += 1

        time_var = time_dimension.CumulVar(index)

        dict4 = {}
        dict4["customer_name*"] = data['names'][manager.IndexToNode(index)]
        dict4["sequence"] = posn
        dict4["latitude"] = data["latitude"][manager.IndexToNode(index)]
        dict4["longitude"] = data["longitude"][manager.IndexToNode(index)]
        dict4["customer_id"] = data['cust_id'][manager.IndexToNode(index)]
        dict4["wait_time"] = convert_wait_time(data['wait_time'][manager.IndexToNode(index)])
        if measure_type == 'duration':
            dict4["time"] = str(dt.timedelta(seconds=distance))
            dict4["cum_time"] = str(dt.timedelta(seconds=totdist))
            # dict4["time_window"] = '{0},{1}'.format(convert_to_time(trip_start, solution.Min(time_var)),
            #                                         convert_to_time(trip_start, solution.Max(time_var)))
        else:
            dict4["distance"] = distance
            dict4["cum_dist"] = totdist

        dict2["total_time"] = (solution.Min(time_var) / 60)
        total_time += (solution.Min(time_var) / 60)
        list_new.append(dict4)
        dict2["route"] = list_new
        list1.append(dict2)

        if posn > 2:
            no_of_vehicles += 1

    dict1["solution_summary"]["total_time"] = total_time
    # dict1["solution_summary"]["no_of_vehicles_used"] = no_of_vehicles

    dict1["solution_detail"] = list1
    return dict1

def vrp_generator(info):

    with open('Keys.json') as lst:
        keys_data = json.load(lst)

    total_keys = len(keys_data.keys())

    s3 = boto3.resource('s3')
    obj = s3.Object("altlife.lambda.function", ("VRP_Config/run_var.txt"))
    read_file = obj.get()['Body'].read().decode('utf-8')

    # print(read_file)
    #
    # run_var = open("run_var.txt", "r")
    run_time_var = int(read_file)
    run_time_var = run_time_var + 1
    if run_time_var > total_keys:
        run_time_var = 1


    run_count = str(run_time_var)
    s3 = boto3.resource('s3')
    obj = s3.Object("altlife.lambda.function", ("VRP_Config/run_var.txt"))
    obj.put(Body=run_count)

    key_info = keys_data[run_count]

    data_clean = create_data(info, key_info)

    distance_matrix, time_matrix = create_distance_matrix(data_clean)
    data = create_data_model(distance_matrix, time_matrix, data_clean)
    # print(distance_matrix)
    # print(time_matrix)
    #max_dist = max(distance_matrix[0])
    max_dist=data['max_dist']
    # Create the routing index manager.
    if (data['measure_type'] == "distance"):
        manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']),
                                               data['num_vehicles'], data['depot'])

    if (data['measure_type'] == "duration"):
        manager = pywrapcp.RoutingIndexManager(len(data['time_matrix']),
                                               data['num_vehicles'], data['depot'])



    # Create Routing Model.
    routing = pywrapcp.RoutingModel(manager)

    def distance_callback(from_index, to_index):
        """Returns the distance between the two nodes."""
        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data['distance_matrix'][from_node][to_node] + data['wait_time'][from_node]

    # ---------------------------------------start----------------------------------------------------------------------
    def time_callback(from_index, to_index):
        travel_time=0
        """Returns the travel time between the two nodes."""
        # Convert from routing variable Index to time matrix NodeIndex.
        try:
            from_node = manager.IndexToNode(from_index)
            to_node = manager.IndexToNode(to_index)
            if to_node == 0 :
                travel_time = 0
            else:
                travel_time = data['time_matrix'][from_node][to_node]
        except:
            raise Exception("time_call_back error")
        return travel_time

    # transit_callback_index = routing.RegisterTransitCallback(distance_callback)

    if data["measure_type"] == "duration":
        transit_callback_index = routing.RegisterTransitCallback(time_callback)
    else:
        transit_callback_index = routing.RegisterTransitCallback(distance_callback)
    # Define cost of each arc.
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)


    time_dim = 'Time'
    routing.AddDimension(
        transit_callback_index,
        0,  # no slack
        data['max_dist'],  # vehicle maximum travel time
        True,  # start cumul to zero
        time_dim)
    time_dimension = routing.GetDimensionOrDie(time_dim)

    if (data['measure_type'] == "duration"):
        time_dimension.SetGlobalSpanCostCoefficient(100)

    # -------------------------------------------------------------------------------------------------
    def demand_callback(from_index):
        return 1


    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)

    capacity_dim = 'Capacity'
    routing.AddDimensionWithVehicleCapacity(
        demand_callback_index,
        0,  # no slack
        data['cap'],  # capacity for each vehicle: use data['cap']
        True,
        capacity_dim)

    # Setting first solution heuristic.
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    # search_parameters.solution_limit = 100
    # search_parameters.time_limit.seconds = 10
    # search_parameters.first_solution_strategy = (
    #     routing_enums_pb2.FirstSolutionStrategy.AUTOMATIC)  # PATH_CHEAPEST_ARC

    search_parameters.first_solution_strategy = routing_enums_pb2.FirstSolutionStrategy.AUTOMATIC
    search_parameters.time_limit.seconds = 60
    #search_parameters.lns_time_limit.seconds = 30
    search_parameters.solution_limit = 10
    search_parameters.log_search = True

    # search_parameters.local_search_metaheuristic = (
    #     routing_enums_pb2.LocalSearchMetaheuristic.SIMULATED_ANNEALING)
    # search_parameters.time_limit.seconds = 30
    # search_parameters.log_search = True

    # Solve the problem.
    solution = routing.SolveWithParameters(search_parameters)
    # Print solution on console.
    print("Status is ",routing.status())
    if solution:
        soldf = print_solution_to_dict(data, solution, manager, routing, max_dist, distance_matrix, time_matrix)
        return soldf
    else:
        raise Exception("No feasible solution found")
